(require '[garden.core :refer [css])
(require '[garden.core :refer [css]])
exit
(+ 1 1)
(require '[garden.core :refer [css]])
(require '[garden :refer [css]])
(require '[garden])
exit
(def route ["/index.html" :index])
route
(match-route route "/index.html")
(match-route route "/another.html")
(path-for route :index)
(def my-routes ["/" {"index.html" :index
"article.html" :article}])
my-routes
(def my-routes ["/" {"index.html" :index
"articles/" {"index.html" :article-index
"article.html" :article}}])
(match-routes my-routes "/index.html")
(match-route my-routes "/index.html")
(match-route my-routes "/articles/article.html")
(path-for my-routes :article-index)
(def my-routes ["/" {"index.html" :index
                        "articles/" {"index.html" :article-index
                                     [:id "/article.html"] :article}}])
(match-route my-routes "/articles/123/article.html")
(match-route my-routes "/articles/999/article.html")
(path-for my-routes :article :id 123)
(path-for my-routes :article :id 99)
exit
boot -h serve
exir
exit
(io/resource "index.html")
exit
(require '[clojure.java.io :as io])
(io/resource "index.html")
(slurp (io/resource "index.html"))
(require '[clojure.string :as str])
(str "hello" "there")
(str/replace (slurp (io/resource "index.html")) "{{CONTENT}}" "Hello!!!!")
(pprint(str/replace (slurp (io/resource "index.html")) "{{CONTENT}}" "Hello!!!!"))
(pprint (str/replace (slurp (io/resource "index.html")) "{{CONTENT}}" "Hello!!!!"))
(format (str/replace (slurp (io/resource "index.html")) "{{CONTENT}}" "Hello!!!!"))
(str/replace (slurp (io/resource "index.html")) "{{CONTENT}}" "Hello!!!!")
exit
(spit "flubber.txt" "test")
(slurp "flubber.txt")
exit
(require '[clojure.java.io :as io])
ls
(def long-string (slurp "build.boot"))
(slurp long-string)
(slurp "build.boot")
(with-open [rdr (io/reader "foo.txt")] (doall (map my-func (line-seq rdr))))
(spit "foo.txt" "A Long multi-line string BYE.")
(slurp "foo.txt")
(spit "resources/foo.txt" "This is me spitting into a folder")
(slurp "resources/foo.txt")
(.exists (io/file "resources/index.html))
)
(.exists (io/file "resources/index.html"))
(.isDirectory (io/file "resources")
)
(.listFiles (io/file "resources"))
(.listFile (io/file "resources"))
(.list (io/file "resources"))
(.list (io/file "resources/"))
(.list (io/file "/resources/"))
(doc io)
(def f (io/file "resources"))
(def fs (file-seq f))
(first fs)
(second fs)
(take 10 fs)
(def old-file (slurp "resources/index.html))
")
)
(def old-file (slurp "resources/index.html"))
old-file
(pprint old-file)
(clojure.string/replace old-file "{{CONTENT}}" "{{HAPPY}}")
(def new-file (clojure.string/replace old-file "{{CONTENT}}" "{{HAPPY}}"))
new-file
(spit "target/index.html" new-file)
(slurp "target/index.html")
exit
(def f (tmp-dir! (spit "flubber.txt" "happy")))
(def f (spit (tmp-dir! "happy.txt")))
(doc map)
(doc tmp-dir!)
(doc add-asset)
(def fs (tmp-dir!))
fs
(tmp-path fs)
(add-resource fs "resources")
(doc add-resource)
exit
(clojure.java.io/file "/tmp/foo")
(def new-file (clojure.java.io/file "/tmp/foo"))
(slurp new-file)
(def new-file (clojure.java.io/file "/tmp/foo.txt"))
(slurp new-file)
(spit new-file "test")
(slurp new-file)
(spit "target/new-flubber.txt" "test")
(.rename "target/new-flubber.txt" "new-file.txt")
(spit "flubber.txt" "test")
(.rename "flubber.text" "test.txt")
(def data-file (io/resource "flubber.text"))
(require '[clojure.java.io :as io])
(def data-file (io/resource "flubber.text"))
data-file
(slurp data-file)
(slurp "flubber.text")
(def data-file (io/resource "flubber.txt"))
(slurp "flubber.txt")
(slurp data-file)
(slurp "flubber.txt")
(def data-file (io/resource "flubber.txt"))
(println (slurp data-file))
(slurp "target/flubber.txt")
(io/resource "target/flubber.txt")
(slurp (io/resource "target/flubber.txt"))
(io/resource "resources/index.html")
(slurp "resources/index.html")
(io.resource "resources/index.html")
(io/resource "resources/index.html")
(slurp (io/resource "resources/index.html"))
(slurp (io/file (io/resource "resources/index.html")))
(require '(clojure.java.io :as io))
(require '[clojure.java.io :as io])
(io/copy (io/file "target/flubber.txt") (io/file "target/new-flubber.txt"))
(io/copy (io/file "target/flubber.txt") (io/file "target/flubber2.txt"))
(io/resource "target/flubber.txt")
(slurp (io/resource "target/flubber.txt"))
(slurp "index.html")
(io/resource "index.html")
(slurp (io/resource "index.html"))
(slurp "index.html")
(slurp (io/resource "veganism.html"))
(def veganism (io/resource "veganism.html"))
(slurp (io/resource "flubber.txt"))
(slurp (io/resource "flubber.html"))
(slurp (io/resource "flubber.txt"))
(slurp (io/resource "flubber.html"))
(.rename (io/resource "flubber.html") "renamed.html")
(clojure.java.io/file (io/resource "flubber.html"))
(io/file (io/resource "flubber.html"))
(.renameTo (io/file (io/resource "flubber.html") (io.file "output.html")
)
(io/file (io/resource "flubber.html"))
(slurp (io/file (io/resource "flubber.html")))
(slurp (io/file "flubber.html"))
(slurp (io/file (io/resource "flubber.html")))
(.renameTo (io/file (io/resource "flubber.html")) (io/file (io/resource "next.html")))
(slurp (io/file (io/resource "flubber.html")))
(io/file "index.html")
(slurp (io/file "index.html"))
(slurp (io/file "resources/index.html"))
(slurp (io/file "index.html"))
(.renameTo (io/file "index.html") (io/file "next.html"))
exit
show
boto show
boot show
(add-resource "resources")
(add-resource (tmp-dir!)"resources")
(add-resource (tmp-dir!) "resources")
(tmp-dir!)
(show (tmp-dir!))
(def tmp (tmp-dir!))
(slurp "template.html")
(slurp "resources/template.html")
(slurp "resources/index.html")
(add-resource (tmp-dir!) "resources/")
(slurp tmp)
(add-resource tmp "resources/")
(add-resource tmp (io/resource "resources/index.html"))
(require '[clojure.java.io :as io])
(add-resource tmp (io/resource "resources/index.html"))
(io/resource "resources/index.html")
(slurp (io/resource "resources/index.html"))
(slurp (io/resource "index.html"))
(add-resource tmp (io/resource "index.html"))
(tmp-file "resources/index.html")
(tmp-path "resources/index.html")
(slurp tmp)
(show tmp)
(tmp)
boot show
(def tmp (tmp-dir!))
show
(show tmp)
(tmp)
boot sift -h
boot tmp-dir! -h
exit
(user-files)
(user-files fileset)
show -f
(require '[vbn.static :as static])
(static/gen-page)
(require '[vbn.static :as static])
(static/gen-page)
(refresh)
(static/gen-page "hello")
(require '[vbn.static :as static] :reload)
(static/gen-page "hello")
exit
(test "hello")
(gen-page "hello")
exit
(gen-page)
(require '[clojure.tools.namespace.repl :as repl])
(repl/refresh)
(gen-page)
(reload)
(gen-page)
(repl/refresh)
(gen-page)
(reload)
(gen-page)
(reload)
(gen-page)
exit
(gen-page)
(require '[vbn.static :as s])
(s/gen-page)
(refresh)
(s/gen-page)
(require '[vbn.static :as s] :reload)
(s/gen-page)
(require '[vbn.static :as s] :reload)
(show)
(tmp-dir!)
(show (tmp-dir!))
(set-env! :dependencies [adzerk/boot-template "1.0.0"])
(set-env! :dependencies '[adzerk/boot-template "1.0.0"])
(set-env! :dependencies '[[adzerk/boot-template "1.0.0"]])
(template help)
-h
(help)
(doc template)
(require '[adzerk/boot-template])
exity
exit
(find-file)
(reload)
(find-file)
(refresh)
(find-file)
(repl/refresh)
(require '[clojure.tools.namespace.repl :as repl])
 (repl/refresh)
(find-file)
(reload)
(find-file)
exit
(find-file)
exit
(lc)
exit
(lc)
exit
(generate-page)
exit
(generate-page)
(show-me)
exit
(generate-page)
exit
(generate-page)
(slurp "template.html")
exiy
exit
(slurp "template.html")
exit
(slurp "index.html")
(slurp "resources/index.html")
(generate-page)
(relaod)
(reload)
(generate-page)
exit
(generate-page)
exit
(generate-page)
exiy
exit
(generate-page)
exit
(generate-page)
exity
exit
(generate-page)
exit
(boot production build target)
exit
